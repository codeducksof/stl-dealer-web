import React, { useState  } from "react";
import { useNavigate } from "react-router-dom"; // ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö redirect

export default function CheckKyc() {


  const apiUrl = process.env.REACT_APP_KYC_API_URL;
  const apiKey = process.env.REACT_APP_KYC_API_KEY;
  
  const [customerID, setCustomerID] = useState("");
  const [loading, setLoading] = useState(false); // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î
  const [error, setError] = useState("");
  const [responseData, setResponseData] = useState(null); // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å API
  const navigate = useNavigate(); // üëâ ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö redirect

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î
    setError(null);
    setResponseData(null); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà

    try {

      
      const response = await fetch(`${apiUrl}/user/${customerID}`, {
        method: "GET",
        headers: {
          "x-api-key": apiKey,
          "Content-Type": "application/json",
        },
      });

      if (!response.ok) {
          throw new Error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ");
      }
      
      const data = await response.json(); // üëâ ‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API

      // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ redirect ‡πÑ‡∏õ DealerRegistration.js
      if (data.id) {
        navigate("/DealerRegistration", { state: { kycData: data } });
      } else {
        setError("KYC ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö");
      }
      
    } catch (error) {
      setError(error.message);
    }finally {
      setLoading(false); // ‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏´‡∏•‡∏î
    }
  };

  return (
    <div class="page-wrapper" id="main-wrapper" data-layout="vertical" data-navbarbg="skin6" data-sidebartype="full"
    data-sidebar-position="fixed" data-header-position="fixed">
    <div
      class="position-relative overflow-hidden radial-gradient min-vh-100 d-flex align-items-center justify-content-center">
      <div class="d-flex align-items-center justify-content-center w-100">
        <div class="row justify-content-center w-100">
          <div class="col-md-8 col-lg-6 col-xxl-3">
            <div class="card mb-0">
              <div class="card-body">
                <a href="/" class="text-nowrap logo-img text-center d-block py-3 w-100">
                 
                </a>
                <p class="text-center">Your Social Campaigns</p>

                {error && (
                    <div className="alert alert-danger" role="alert">
                      {error}
                    </div>
                  )}
                  
                  {loading ? (
                      <div className="text-center">Loading...</div> // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏´‡∏•‡∏î
                  ) : (
                  <form onSubmit={handleSubmit}>
                    <div class="mb-3">
                      <label for="customerID" class="form-label">‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô</label>

                      <input
                                  type="text"
                                  className="form-control"
                                  name="customerID"
                                  id="username"
                                  placeholder="‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô"
                                  value={customerID}
                                  onChange={(e) => setCustomerID(e.target.value)}
                                  required
                              />

                    </div>
                    <button type="submit" class="btn btn-primary w-100 py-8 fs-4 mb-4 rounded-2">‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö</button>
                  </form>
                  )}

                  {/* ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• Response */}
                  {loading && <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>}
                  {error && <p style={{ color: "red" }}>‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {error}</p>}
                  {responseData && (
                    <pre style={{ background: "#f4f4f4", padding: "10px", borderRadius: "5px" }}>
                      {responseData}
                    </pre>
                  )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
    );
  }
  